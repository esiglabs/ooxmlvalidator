{"version":3,"sources":["../src/index.js"],"names":["pkijs","asn1js","xmldsigjs","xadesjs","pvutils","jszip","verifyChain","certificate","chain","trustedCAs","Promise","resolve","then","certificateChainEngine","CertificateChainValidationEngine","certs","trustedCerts","filter","cert","push","verify","result","extractTimestamp","signedXml","UnsignedProperties","sigTimeStamp","UnsignedSignatureProperties","items","forEach","item","localName","encTimeStamp","EncapsulatedTimeStamp","asn1","fromBER","Value","buffer","contentInfo","ContentInfo","schema","ex","validationData","GetElement","certEls","getElementsByTagNameNS","certificates","i","length","pem","textContent","certDer","stringToArrayBuffer","fromBase64","Certificate","validateFile","zip","filename","hashAlgo","hash","transforms","slice","file","async","crypto","getCrypto","digest","cont","xmlDoc","Parse","doc","trans","name","relsEl","getElementsByTagName","rels","Array","prototype","call","finalRels","id","rel","getAttribute","type","data","ids","indexOf","types","parentNode","removeChild","hasAttributeNS","undefined","setAttributeNS","sort","a","b","leftId","rightId","appendChild","transform","XmlDsigC14NTransform","LoadInnerXml","GetOutput","toString","tempBuffer","ArrayBuffer","view","Uint8Array","charCodeAt","view1","view2","res","validateSig","num","trustedSigningCAs","trustedTimestampingCAs","sigInfo","SignatureInfo","sequence","tsToken","xmlSig","SignedXml","LoadXml","signature","KeyInfo","X509CertificateList","simpl","Verify","catch","sigVerified","packageObject","obj","refs","checkList","uri","ref","n","substring","algorithm","CryptoConfig","CreateHashAlgorithm","hashAlgorithm","b64Hash","transformEls","transformEl","childNodes","ooxmlns","transformData","idEls","j","idTypes","all","map","entry","hashVerified","reduce","truststore","signerVerified","status","hasTS","tsSigned","SignedData","content","XmlSignature","GetChild","sigValueCanon","replace","signer","checkChain","extendedMode","tsVerified","signatureVerified","tsCert","signerCertificate","console","log","e","tsCertVerified","ValidationInfo","isValid","isSigned","signatures","signingTruststore","timestampingTruststore","verified","isSignersVerified","OOXMLValidator","ooxmlInfo","fileContents","idx","splice","loadAsync","sigs","Object","keys","files","match","Error"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * OOXML Validator module\n *\n * By Fotis Loukos <me@fotisl.com>\n * @module ooxmlvalidator\n */\nimport * as pkijs from 'pkijs';\nimport * as asn1js from 'asn1js';\nimport * as xmldsigjs from 'xmldsigjs';\nimport * as xadesjs from 'xadesjs';\nimport * as pvutils from 'pvutils';\nimport * as jszip from 'jszip';\nimport './webcrypto';\n\n/**\n  * A trust store.\n  * @typedef {Object} TrustStore\n  * @property {string} name - The name of the trust store.\n  * @property {Array<pkijs.Certificate>} certificates - All the certificates\n  * contained in the trust store.\n  */\n\n/**\n * Trust store verification status.\n * @typedef {Object} TrustStoreStatus\n * @property {string} name - The name of the trust store.\n * @property {boolean} status - True if the certificate chains to this trust\n * store, false otherwise.\n */\n\n/**\n * Timestamp token and associated certificates.\n * @typedef {Object} TimestampTokenCerts\n * @property {pkijs.ContentInfo} contentInfo - The timestamp token.\n * @property {Array<pkijs.Certificate>} certificates - The associated\n * certificates.\n */\n\n/**\n * Hashing algorithm specification.\n * @typedef {Object} HashAlgorithm\n * @property {string} name - The name of the algorithm.\n */\n\n/**\n * XML transformation specification.\n * @typedef {Object} Transformation\n * @typedef {string} name - The type of the transformation\n * (relationshiptransform or c14n).\n * @typedef {Object} data - Associated data based on the transformation.\n */\n\n/**\n * Verify if a certificate chains to some trusted CAs.\n * @param {pkijs.Certificate} certificate - The certificate that will be\n * checked.\n * @param {Array<pkijs.Certificate>} chain - Additional certificates in the\n * chain.\n * @param {Array<pkijs.Certificate>} trustedCAs - The trusted CAs\n * @return {Promise<boolean>} A promise that is resolved with a boolean value\n * stating if the certificate was verified or not.\n */\nfunction verifyChain(certificate, chain, trustedCAs) {\n  if(certificate === null)\n    return Promise.resolve(false);\n\n  return Promise.resolve().then(() => {\n    const certificateChainEngine = new pkijs.CertificateChainValidationEngine({\n      certs: chain,\n      trustedCerts: trustedCAs.filter(cert => typeof cert !== 'undefined')\n    });\n    certificateChainEngine.certs.push(certificate);\n\n    return certificateChainEngine.verify();\n  }).then(result => {\n    return result.result;\n  }, result => {\n    return false;\n  });\n}\n\n/**\n * Extract the timestamp from a signature.\n * @param {SignedXml} signedXml - The signed XML.\n * @return {TimestampTokenCerts} The signature and signing cert, or null if no\n * timestamp exists.\n */\nfunction extractTimestamp(signedXml) {\n  if(!('UnsignedProperties' in signedXml) ||\n    !('UnsignedSignatureProperties' in signedXml.UnsignedProperties))\n    return null\n\n  let sigTimeStamp;\n  signedXml.UnsignedProperties.UnsignedSignatureProperties.items\n    .forEach(item => {\n      if(item.localName === 'SignatureTimeStamp')\n        sigTimeStamp = item;\n    });\n\n  if(typeof sigTimeStamp === 'undefined')\n    return null;\n\n  if(!('EncapsulatedTimeStamp' in sigTimeStamp))\n    return null;\n\n  let encTimeStamp;\n  sigTimeStamp.EncapsulatedTimeStamp.items.forEach(item => {\n    if(item.localName === 'EncapsulatedTimeStamp')\n      encTimeStamp = item;\n  });\n\n  if(typeof encTimeStamp === 'undefined')\n    return null;\n\n  const asn1 = asn1js.fromBER(encTimeStamp.Value.buffer);\n\n  let contentInfo;\n  try {\n    contentInfo = new pkijs.ContentInfo({ schema: asn1.result });\n  } catch(ex) {\n    return null;\n  }\n\n  let validationData;\n  try {\n    validationData = signedXml.UnsignedProperties.UnsignedSignatureProperties\n      .GetElement('TimeStampValidationData')\n  } catch(ex) {\n    return null;\n  }\n\n  const certEls = validationData.getElementsByTagNameNS(\n    'http://uri.etsi.org/01903/v1.3.2#', 'EncapsulatedX509Certificate');\n  const certificates = [];\n  for(let i = 0; i < certEls.length; i++) {\n    const pem = certEls[i].textContent;\n    const certDer = pvutils.stringToArrayBuffer(pvutils.fromBase64(pem));\n    const asn1 = asn1js.fromBER(certDer);\n    const cert = new pkijs.Certificate({ schema: asn1.result });\n    certificates.push(cert);\n  }\n\n  return {\n    contentInfo,\n    certificates\n  };\n}\n\n/**\n * Validate the hash of a file.\n * TODO: Also validate content types based on https://www.ecma-international.org/activities/Office%20Open%20XML%20Formats/Draft%20ECMA-376%203rd%20edition,%20March%202011/Office%20Open%20XML%20Part%202%20-%20Open%20Packaging%20Conventions.pdf.\n * @param {JSZip} zip - The OOXML file.\n * @param {string} filename - The filename.\n * @param {HashAlgorithm} hashAlgo - The hash algorithm.\n * @param {ArrayBuffer} hash - The expected hash of the file.\n * @param {Array<Transformation>} transforms - The transforms to be applied to\n * the file.\n * @return {Promise<boolean>} A promise that is resolved with true if the\n * hash has validated, otherwise false.\n */\nfunction validateFile(zip, filename, hashAlgo, hash, transforms) {\n  return Promise.resolve().then(() => {\n    if(filename[0] === '/')\n      filename = filename.slice(1);\n\n    if(transforms.length === 0)\n      return zip.file(filename).async('uint8array');\n    else\n      return zip.file(filename).async('string');\n  }).then(cont => {\n    const crypto = pkijs.getCrypto();\n\n    if(transforms.length === 0)\n      return crypto.digest(hashAlgo, cont);\n\n    const xmlDoc = xadesjs.Parse(cont, 'application/xml');\n    let doc;\n\n    transforms.forEach(trans => {\n      if(trans.name === 'relationshiptransform') {\n        const relsEl = xmlDoc.getElementsByTagName('Relationships')[0];\n        const rels = Array.prototype.slice.call(\n          relsEl.getElementsByTagName('Relationship'));\n\n        const finalRels = [];\n        rels.forEach(rel => {\n          const id = rel.getAttribute('Id');\n          const type = rel.getAttribute('Type');\n\n          if((trans.data.ids.indexOf(id) === -1) &&\n            (trans.data.types.indexOf(type) === -1)) {\n            rel.parentNode.removeChild(rel);\n          } else {\n            // We must add TargetMode with the default value Internal if no\n            // such attribute exists\n            if(!rel.hasAttributeNS(undefined, 'TargetMode'))\n              rel.setAttributeNS(undefined, 'TargetMode', 'Internal');\n            finalRels.push(rel);\n          }\n        });\n\n        finalRels.sort((a, b) => {\n          const leftId = a.getAttribute('Id');\n          const rightId = b.getAttribute('Id');\n\n          if(leftId === rightId)\n            return 0;\n          if(leftId < rightId)\n            return -1;\n          return 1;\n        });\n\n        finalRels.forEach(rel => relsEl.appendChild(rel));\n      } else if(trans.name === 'c14n') {\n        // We assume c14n is always the last transformation.\n        const transform = new xmldsigjs.XmlDsigC14NTransform();\n        transform.LoadInnerXml(xmlDoc);\n        doc = transform.GetOutput();\n      }\n    });\n\n    if(typeof doc === 'undefined')\n      doc = xmlDoc.toString();\n\n    const tempBuffer = new ArrayBuffer(doc.length);\n    const view = new Uint8Array(tempBuffer);\n\n    for(let i = 0; i < doc.length; i++)\n      view[i] = doc.charCodeAt(i);\n\n    return crypto.digest(hashAlgo, tempBuffer);\n  }).then(res => {\n    const view1 = new Uint8Array(hash);\n    const view2 = new Uint8Array(res);\n\n    if(view1.length !== view2.length)\n      return false;\n\n    for(let i = 0; i < view1.length; i++) {\n      if(view1[i] !== view2[i])\n        return false;\n    }\n\n    return true;\n  });\n}\n\n/**\n * Validate a single signature.\n * @param {JSZip} zip - The OOXML file.\n * @param {integer} num - The number of the signature.\n * @param {Array<TrustStore>} trustedSigningCAs - Trusted document signing CAs.\n * @param {Array<TrustStore>} trustedTimestampingCAs - Trusted document\n * timestamping CAs.\n * @return {Promise<SignatureInfo>} A promise that is resolved with a\n * SignatureInfo object containing information about the signature.\n */\nfunction validateSig(zip, num, trustedSigningCAs, trustedTimestampingCAs) {\n  const sigInfo = new SignatureInfo(num);\n  let sequence = Promise.resolve();\n  let xmlDoc, signedXml, tsToken;\n\n  sequence = sequence.then(() => {\n    return zip.file(`_xmlsignatures/sig${num}.xml`).async('string');\n  }).then(cont => {\n    xmlDoc = xadesjs.Parse(cont, 'application/xml');\n    const xmlSig = xmlDoc.getElementsByTagNameNS(\n      'http://www.w3.org/2000/09/xmldsig#', 'Signature');\n    signedXml = new xadesjs.SignedXml(xmlDoc);\n    signedXml.LoadXml(xmlSig[0]);\n\n    sigInfo.cert = signedXml.signature.KeyInfo.items[0]\n      .X509CertificateList[0].simpl;\n\n    return signedXml.Verify();\n  }).then(res => {\n    return res;\n  }).catch(e => {\n    return false;\n  }).then(res => {\n    sigInfo.sigVerified = res;\n\n    let packageObject;\n    Array.prototype.slice.call(xmlDoc.getElementsByTagName('Object'))\n      .forEach(obj => {\n        if(obj.getAttribute('Id') === 'idPackageObject')\n          packageObject = obj;\n      });\n\n    if(typeof packageObject === 'undefined')\n      return [ false ];\n\n    const refs = Array.prototype.slice.call(\n      packageObject.getElementsByTagName('Reference'));\n    const checkList = [];\n    refs.forEach(ref => {\n      let uri = ref.getAttribute('URI');\n      const n = uri.indexOf('?');\n      if(n !== -1)\n        uri = uri.substring(0, n);\n\n      const algorithm = xmldsigjs.CryptoConfig.CreateHashAlgorithm(ref\n        .getElementsByTagName('DigestMethod')[0].getAttribute('Algorithm'))\n        .algorithm;\n\n      // We assume the same algorithm is used for all files\n      sigInfo.hashAlgorithm = algorithm.name;\n\n      const b64Hash = ref.getElementsByTagName('DigestValue')[0].textContent;\n      const hash = pvutils.stringToArrayBuffer(pvutils.fromBase64(b64Hash));\n\n      const transforms = [];\n      const transformEls = Array.prototype.slice.call(\n        ref.getElementsByTagName('Transforms'));\n      transformEls.forEach(transformEl => {\n        for(let i = 0; i < transformEl.childNodes.length; i++) {\n          const transform = transformEl.childNodes[i];\n          const ooxmlns = 'http://schemas.openxmlformats.org/package/2006';\n          if(transform.getAttribute('Algorithm') ===\n            `${ooxmlns}/RelationshipTransform`) {\n            const transformData = {\n              ids: [],\n              types: []\n            };\n\n            const idEls = transform.getElementsByTagNameNS(\n              `${ooxmlns}/digital-signature`, 'RelationshipReference');\n            for(let j = 0; j < idEls.length; j++)\n              transformData.ids.push(idEls[j].getAttribute('SourceId'));\n\n            const idTypes = transform.getElementsByTagNameNS(\n              `${ooxmlns}/digital-signature`, 'RelationshipsGroupReference');\n            for(let j = 0; j < idTypes.length; j++)\n              transformData.types.push(idTypes[j].getAttribute('SourceType'));\n\n            transforms.push({\n              name: 'relationshiptransform',\n              data: transformData\n            });\n          } else if(transform.getAttribute('Algorithm') ===\n            'http://www.w3.org/TR/2001/REC-xml-c14n-20010315') {\n            transforms.push({\n              name: 'c14n'\n            });\n          } else {\n            return [ false ];\n          }\n        }\n      });\n\n      checkList.push({\n        uri,\n        algorithm,\n        hash,\n        transforms\n      });\n    });\n\n    return Promise.all(checkList.map(entry =>\n      validateFile(zip, entry.uri, entry.algorithm, entry.hash,\n        entry.transforms)));\n  }).then(res => {\n    sigInfo.hashVerified = res.reduce((a, b) => a && b);\n  });\n\n  trustedSigningCAs.forEach(truststore => {\n    sequence = sequence.then(() => verifyChain(sigInfo.cert, [],\n      truststore.certificates)).then(result => {\n      sigInfo.signerVerified.push({\n        name: truststore.name,\n        status: result\n      });\n    });\n  });\n\n  sequence = sequence.then(() => {\n    tsToken = extractTimestamp(signedXml);\n    if(tsToken !== null) {\n      sigInfo.hasTS = true;\n\n      const tsSigned = new pkijs.SignedData({\n        schema: tsToken.contentInfo.content\n      });\n\n      const transform = new xmldsigjs.XmlDsigC14NTransform();\n      transform.LoadInnerXml(signedXml.XmlSignature.GetChild('SignatureValue'));\n      let sigValueCanon = transform.GetOutput();\n      // According to https://www.w3.org/TR/REC-xml/#sec-line-ends, parsers\n      // should convert any EOL to \\n. This fixes a bug in an older xmldsig\n      // version.\n      sigValueCanon = sigValueCanon.replace(/&#xD;/g, '');\n\n      return tsSigned.verify({\n        signer: 0,\n        data: pvutils.stringToArrayBuffer(sigValueCanon),\n        checkChain: false,\n        extendedMode: true\n      });\n    } else {\n      return false;\n    }\n  }).then(result => {\n    if(tsToken !== null) {\n      sigInfo.tsVerified = result.signatureVerified;\n      sigInfo.tsCert = result.signerCertificate;\n    }\n  }).catch(e => {\n    console.log(e);\n    if(tsToken !== null) {\n      sigInfo.tsVerified = false;\n      sigInfo.tsCert = e.signerCertificate;\n    }\n  });\n\n  trustedTimestampingCAs.forEach(truststore => {\n    sequence = sequence.then(() => {\n      if(tsToken !== null)\n        return verifyChain(sigInfo.tsCert, [], truststore.certificates);\n    }).then(result => {\n      if(tsToken !== null) {\n        sigInfo.tsCertVerified.push({\n          name: truststore.name,\n          status: result\n        });\n      }\n    });\n  });\n\n  return sequence.then(() => sigInfo);\n}\n\n/**\n * Object validation information.\n */\nexport class ValidationInfo {\n  /**\n   * Generate an empty ValidationInfo object.\n   * @constructor\n   */\n  constructor() {\n    /**\n     * @type {boolean}\n     * @description A valid file.\n     */\n    this.isValid = false;\n    /**\n     * @type {boolean}\n     * @description A signed file.\n     */\n    this.isSigned = false;\n    /**\n     * @type {Array<SignatureInfo>}\n     * @description Validation information for all signatures.\n     */\n    this.signatures = [];\n  }\n\n  /**\n   * Check if all signatures have been verified.\n   */\n  get sigVerified() {\n    let verified = true;\n\n    this.signatures.forEach(sigInfo => {\n      verified &= sigInfo.sigVerified;\n    });\n\n    return verified;\n  }\n\n  /**\n   * Check if all hashes correspond to the signed data.\n   */\n  get hashVerified() {\n    let verified = true;\n\n    this.signatures.forEach(sigInfo => {\n      verified &= sigInfo.hashVerified;\n    });\n\n    return verified;\n  }\n\n  /**\n   * Check if all signers have been verified against a truststore.\n   * @param {string} signingTruststore - The name of the signing truststore.\n   * @param {string} timestampingTruststore - The name of the timestamping\n   * truststore.\n   * @return {boolean} True if the file was verified against both truststores,\n   * false otherwise.\n   */\n  isSignersVerified(signingTruststore, timestampingTruststore) {\n    let verified = true;\n\n    this.signatures.forEach(sigInfo => {\n      verified &= sigInfo.isSignersVerified(signingTruststore,\n        timestampingTruststore);\n    });\n\n    return verified;\n  }\n}\n\n/**\n * Single signature validation information.\n */\nexport class SignatureInfo {\n  /**\n   * Generate an empty SignatureInfo object.\n   * @param {Object} id - The signature's identifier.\n   * @constructor\n   */\n  constructor(id) {\n    /**\n     * @type {Object}\n     * @description An identifier for the signature.\n     */\n    this.id = id;\n    /**\n     * @type {boolean}\n     * @description Signed hash has been verified.\n     */\n    this.sigVerified = false;\n    /**\n     * @type {boolean}\n     * @description The hash corresponds to the signed data.\n     */\n    this.hashVerified = false;\n    /**\n     * @type {string}\n     * @description The algorithm that was used to hash the data.\n     */\n    this.hashAlgorithm = '';\n    /**\n     * @type {Array<TrustStoreStatus>}\n     * @description Signer certificate chains to a trusted signing CA.\n     */\n    this.signerVerified = [];\n    /**\n     * @type {boolean}\n     * @description A timestamped OOXML file.\n     */\n    this.hasTS = false;\n    /**\n     * @type {boolean}\n     * @description The timestamp has been verified.\n     */\n    this.tsVerified = false;\n    /**\n     * @type {Array<TrustStoreStatus>}\n     * @description The certificate of the timestamp chains to a trusted\n     * timestamping CA.\n     */\n    this.tsCertVerified = [];\n    /**\n     * @type {pkijs.Certificate}\n     * @description The signer's certificate.\n     */\n    this.cert = null;\n    /**\n     * @type {pkijs.Certificate}\n     * @description The timestamp authority's certificate.\n     */\n    this.tsCert = null;\n  }\n\n  /**\n   * Check if the file verified was a valid signed OOXML whose signature and\n   * signed hash have been verified.\n   */\n  get isValidSigned() {\n    return this.isValid & this.isSigned & this.sigVerified & this.hashVerified;\n  }\n\n  /**\n   * Check if the file verified was a valid signed and timestamped OOXML whose\n   * signature, signed hash and timestamp have been verified.\n   */\n  get isValidSignedTimestamped() {\n    return this.isValid & this.isSigned & this.sigVerified &\n      this.hashVerified & this.hasTS & this.tsVerified;\n  }\n\n  /**\n   * Check if the signer has been verified against a truststore. If the file is\n   * timestamped, then the timestamp signer will also be checked against another\n   * truststore.\n   * @param {string} signingTruststore - The name of the signing truststore.\n   * @param {string} timestampingTruststore - The name of the timestamping\n   * truststore.\n   * @return {boolean} True if the file was verified against both truststores,\n   * false otherwise.\n   */\n  isSignersVerified(signingTruststore, timestampingTruststore) {\n    if(!this.isValid || !this.isSigned)\n      return false;\n\n    let verified = false;\n    this.signerVerified.forEach(signer => {\n      if(signer.name === signingTruststore)\n        verified = signer.status;\n    });\n    if(verified === false)\n      return false;\n\n    if(this.hasTS) {\n      verified = false;\n      this.tsCertVerified.forEach(signer => {\n        if(signer.name === timestampingTruststore)\n          verified = signer.status;\n      });\n      if(verified === false)\n        return false;\n    }\n\n    return true;\n  }\n};\n\n/**\n * OOXML Validator class\n */\nexport class OOXMLValidator {\n  /**\n   * Load an OOXML file from a buffer.\n   * @param {ArrayBuffer} buffer - The buffer containing the OOXML file.\n   */\n  constructor(buffer) {\n    /**\n     * @type {Array<TrustStore>}\n     * @description Trusted document signing CAs.\n     */\n    this.trustedSigningCAs = [];\n    /**\n     * @type {Array<TrustStore>}\n     * @description Trusted document timestamping CAs.\n     */\n    this.trustedTimestampingCAs = [];\n    /**\n     * @type {ValidationInfo}\n     * @description A ValidationInfo object holding the validation results.\n     */\n    this.ooxmlInfo = new ValidationInfo();\n    /**\n     * @type {ArrayBuffer}\n     * @description The contents of the OOXML file.\n     */\n    this.fileContents = buffer;\n    /**\n     * @type {JSZip}\n     * @description The file as a zip structure.\n     */\n    this.zip = null;\n  }\n\n  /**\n   * Add a trust store to the document signing trust stores.\n   * @param {TrustStore} truststore - The trust store to add.\n   */\n  addSigningTruststore(truststore) {\n    this.trustedSigningCAs.push(truststore);\n  }\n\n  /**\n   * Remove a trust store from the document signing trust stores by name.\n   * @param {string} name - The name of the trust store to remove.\n   */\n  removeSigningTruststore(name) {\n    let idx;\n\n    for(idx = 0; idx < this.trustedSigningCAs.length; idx++) {\n      if(this.trustedSigningCAs[idx].name === name) {\n        this.trustedSigningCAs.splice(idx, 1);\n        idx--;\n      }\n    }\n  }\n\n  /**\n   * Add a trust store to the timestamping trust stores.\n   * @param {TrustStore} truststore - The trust store to add.\n   */\n  addTimestampingTruststore(truststore) {\n    this.trustedTimestampingCAs.push(truststore);\n  }\n\n  /**\n   * Remove a trust store from the document signing trust stores by name.\n   * @param {string} name - The name of the trust store to remove.\n   */\n  removeTimestampingTruststore(name) {\n    let idx;\n\n    for(idx = 0; idx < this.trustedTimestampingCAs.length; idx++) {\n      if(this.trustedTimestampingCAs[idx].name === name) {\n        this.trustedTimestampingCAs.splice(idx, 1);\n        idx--;\n      }\n    }\n  }\n\n  /**\n   * Validate the OOXML file.\n   * @return {Promise<ValidationInfo>} A promise that is resolved with an\n   * ValidationInfo object containing the validation results.\n   */\n  validate() {\n    let sequence = Promise.resolve();\n\n    sequence = sequence.then(() => jszip.loadAsync(this.fileContents))\n      .then(zip => {\n        this.zip = zip;\n        this.ooxmlInfo.isValid = true;\n\n        const sigs = Object.keys(zip.files).filter(name =>\n          name.match(/_xmlsignatures\\/sig[0-9]+.xml/)).map(name =>\n          name.replace('_xmlsignatures/sig', '').replace('.xml', ''));\n        if(sigs.length === 0)\n          throw new Error('Unsigned OOXML file');\n\n        this.ooxmlInfo.isSigned = true;\n\n        return Promise.all(sigs.map(num => validateSig(zip, num,\n          this.trustedSigningCAs, this.trustedTimestampingCAs)));\n      }, e => {\n        throw new Error('Invalid OOXML file');\n      }).then(res => {\n        this.ooxmlInfo.signatures = res.slice();\n      }).catch(() => {});\n\n    return sequence.then(() => this.ooxmlInfo);\n  }\n}\n"]}